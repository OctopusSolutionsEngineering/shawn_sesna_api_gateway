step "generate-github-token" {
    name = "Generate GitHub Token"

    action {
        action_type = "Octopus.Script"
        notes = "Generate a token from a GitHub application used to authenticate with the CaC GitHub repo."
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "sales-maven-feed"
            Octopus.Action.Package.PackageId = "com.octopus:enterprise-patterns-scripts"
            Octopus.Action.Script.ScriptFileName = "github_app_token.py"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-ubuntu"

        packages {
            acquisition_location = "Server"
            feed = "sales-maven-feed"
            package_id = "com.octopus:enterprise-patterns-scripts"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "check-for-updates" {
    name = "Check for Updates"

    action {
        action_type = "Octopus.Script"
        notes = "Check the upstream repo to see if there are any updates to merge into this project."
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "sales-maven-feed"
            Octopus.Action.Package.PackageId = "com.octopus:enterprise-patterns-scripts"
            Octopus.Action.Script.ScriptFileName = "preview_merge_repo.py"
            Octopus.Action.Script.ScriptParameters = "--git-protocol https --git-host github.com --git-organization OctopusSolutionsEngineering --git-username x-access-token --git-password #{Octopus.Action[Generate GitHub Token].Output.GitHubToken} --template-repo-name DSC-AWS-FrontendWebApp --tenant-name \"#{Octopus.Space.Name}\" --silent-fail"
            Octopus.Action.Script.ScriptSource = "Package"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopussamples/diff2html"
        }

        packages {
            acquisition_location = "Server"
            feed = "sales-maven-feed"
            package_id = "com.octopus:enterprise-patterns-scripts"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "create-api-gateway" {
    name = "Create API Gateway"

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        notes = "Creates the shared API Gateway that hosts the microservices and frontend application."
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormation.Tags = "[{\"key\":\"OctopusTenantId\",\"value\":\"#{if Octopus.Deployment.Tenant.Id}#{Octopus.Deployment.Tenant.Id}#{/if}#{unless Octopus.Deployment.Tenant.Id}untenanted#{/unless}\"},{\"key\":\"OctopusStepId\",\"value\":\"#{Octopus.Step.Id}\"},{\"key\":\"OctopusRunbookRunId\",\"value\":\"#{if Octopus.RunBookRun.Id}#{Octopus.RunBookRun.Id}#{/if}#{unless Octopus.RunBookRun.Id}none#{/unless}\"},{\"key\":\"OctopusDeploymentId\",\"value\":\"#{if Octopus.Deployment.Id}#{Octopus.Deployment.Id}#{/if}#{unless Octopus.Deployment.Id}none#{/unless}\"},{\"key\":\"OctopusProjectId\",\"value\":\"#{Octopus.Project.Id}\"},{\"key\":\"OctopusEnvironmentId\",\"value\":\"#{Octopus.Environment.Id}\"},{\"key\":\"Environment\",\"value\":\"#{Octopus.Environment.Name}\"},{\"key\":\"DeploymentProject\",\"value\":\"#{Octopus.Project.Name}\"}]"
            Octopus.Action.Aws.CloudFormationStackName = "#{AWS.CloudFormation.ApiGatewayStack}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                Resources:
                  RestApi:
                    Type: 'AWS::ApiGateway::RestApi'
                    Properties:
                      Description: Octopus Lambda Gateway
                      Name: 'Octopub - #{Octopus.Space.Name | YamlSingleQuoteEscape}'
                      BinaryMediaTypes:
                        - '*/*'
                      EndpointConfiguration:
                        Types:
                          - REGIONAL
                  Health:
                    Type: 'AWS::ApiGateway::Resource'
                    Properties:
                      RestApiId:
                        Ref: RestApi
                      ParentId:
                        'Fn::GetAtt':
                          - RestApi
                          - RootResourceId
                      PathPart: health
                  Api:
                    Type: 'AWS::ApiGateway::Resource'
                    Properties:
                      RestApiId:
                        Ref: RestApi
                      ParentId:
                        'Fn::GetAtt':
                          - RestApi
                          - RootResourceId
                      PathPart: api
                  Web:
                    Type: 'AWS::ApiGateway::Resource'
                    Properties:
                      RestApiId: !Ref RestApi
                      ParentId: !GetAtt
                        - RestApi
                        - RootResourceId
                      PathPart: '{proxy+}'
                Outputs:
                  RestApi:
                    Description: The REST API
                    Value: !Ref RestApi
                  RootResourceId:
                    Description: ID of the resource exposing the root resource id
                    Value:
                      'Fn::GetAtt':
                        - RestApi
                        - RootResourceId
                  Health:
                    Description: ID of the resource exposing the health endpoints
                    Value: !Ref Health
                  Api:
                    Description: ID of the resource exposing the api endpoint
                    Value: !Ref Api
                  Web:
                    Description: ID of the resource exposing the web app frontend
                    Value: !Ref Web
                
                    EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "display-rest-api-id" {
    name = "Display REST API ID"

    action {
        action_type = "Octopus.Script"
        notes = "Displays the API Gateway ID created by the CloudFormation template."
        properties = {
            Octopus.Action.Script.ScriptBody = "echo \"REST API ID: #{Octopus.Action[Create API Gateway].Output.AwsOutputs[RestApi]}\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "generate-issue-on-failure" {
    condition = "Failure"
    name = "Generate Issue on Failure"

    action {
        action_type = "Octopus.Script"
        notes = "Automatically generate a GitHub issue if this deployment fails."
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "sales-maven-feed"
            Octopus.Action.Package.PackageId = "com.octopus:enterprise-patterns-scripts"
            Octopus.Action.Script.ScriptFileName = "github_create_issue.py"
            Octopus.Action.Script.ScriptParameters = "--git-repo InternalEnterprisePatternsIssues --issue-title \"Deployment failed: #{Octopus.Space.Name} #{Octopus.Project.Name} #{Octopus.Release.Number} #{Octopus.Environment.Name}\" --issue-body \"#{Octopus.Web.ServerUri}#{Octopus.Web.DeploymentLink}\""
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-ubuntu"

        packages {
            acquisition_location = "Server"
            feed = "sales-maven-feed"
            package_id = "com.octopus:enterprise-patterns-scripts"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}